// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DB_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String          @id @default(cuid())
    name           String?
    email          String?         @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    diagrams       Diagram[]
    credits        UserCredits?
    subscription   Subscription?
    diagramThreads DiagramThread[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Diagram {
    id            String         @id @default(cuid())
    prompt        String         @db.Text
    code          String         @db.Text
    type          String
    isComplex     Boolean        @default(false)
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    user          User?          @relation(fields: [userId], references: [id])
    userId        String?
    anonymousId   String?
    thread        DiagramThread? @relation("ThreadDiagrams", fields: [threadId], references: [id])
    threadId      String?
    parentDiagram Diagram?       @relation("DiagramVersions", fields: [parentId], references: [id])
    parentId      String?
    childDiagrams Diagram[]      @relation("DiagramVersions")
    isSaved       Boolean        @default(false)
    asRootDiagram DiagramThread? @relation("ThreadRoot")

    @@index([userId])
    @@index([anonymousId])
    @@index([threadId])
    @@index([parentId])
}

model DiagramThread {
    id            String    @id @default(cuid())
    name          String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    user          User?     @relation(fields: [userId], references: [id])
    userId        String?
    diagrams      Diagram[] @relation("ThreadDiagrams")
    rootDiagram   Diagram?  @relation("ThreadRoot", fields: [rootDiagramId], references: [id])
    rootDiagramId String?   @unique

    @@index([userId])
}

model UserCredits {
    id               String    @id @default(cuid())
    user             User      @relation(fields: [userId], references: [id])
    userId           String    @unique
    credits          Int       @default(20)
    lastCreditReset  DateTime  @default(now())
    monthlyCredits   Int       @default(0) // Additional monthly credits for pro users
    lastMonthlyReset DateTime? // When the monthly credits were last reset

    @@index([userId])
}

model Subscription {
    id                String   @id @default(cuid())
    user              User     @relation(fields: [userId], references: [id])
    userId            String   @unique
    status            String // active, cancelled, expired
    lemonSqueezyId    String   @unique // LemonSqueezy subscription ID
    currentPeriodEnd  DateTime
    cancelAtPeriodEnd Boolean  @default(false)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@index([userId])
    @@index([lemonSqueezyId])
}
